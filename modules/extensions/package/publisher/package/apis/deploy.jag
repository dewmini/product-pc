<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 Description: Invoke routed api endpoints
 Filename : packages.jag
 * custom api to manage operations

 ENDPOINTS:
 CREATE
 /assets/package/apis/packages

 */
require('/modules/publisher.js').exec(function (ctx) {
    importPackage(org.wso2.carbon.pc.core.assets.resources);
    var log = new Log('package_api_endpoints');
    var responseProcessor = require('utils').response;
    var ref = require('utils').time;
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(req.getRequestURI());
    var DEPLOYMENT_URL = '/{context}/assets/package/apis/deployments';
    var ASSOCIATE_DEPLOYMENT_BPMN_URL = '/{context}/assets/package/apis/deployments/associate';
    var method = req.getMethod();  
    var userName = user.username;
    var requestProcessData = req.getAllParameters('UTF-8');           
    switch (method) {
        case 'POST':// POST endpoints
            if (uriMatcher.match(DEPLOYMENT_URL)) {
            //to associate package
                try {
                    log.info(requestProcessData);
                    var deployInstance = Deployment();
                    var responseObj = deployInstance.deploy(requestProcessData.packageName, requestProcessData.packageVersion, userName);
                    log.info(responseObj);
                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.OK, res, responseObj);
                    } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error("Error while creating package for the request due to " + e.message);

                        response = responseProcessor.buildErrorResponseDefault(e.code, 'error on create package', res,
                                        'Failed to create package of type: ' + options.type, e.message, []);
                        return;
                    }
                    log.error(e.message, e);
                    response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on create package', res, 'Failed to create package of type: ' + options.type, 'more information on create package error', []);
                    if (log.isDebugEnabled()) {
                        log.debug("Error while creating package for the request : " + e);
                    }
                }
            } else if (uriMatcher.match(ASSOCIATE_DEPLOYMENT_BPMN_URL)) {
                log.info("***************UUUUUUUUUUU***");
            //to associate package
                try {
                    log.info(requestProcessData);
                    var deployInstance = Deployment();
                    var responseObj = deployInstance.associateDeploymentID(requestProcessData.packageName, requestProcessData.packageVersion, userName);
                    log.info(responseObj);
                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.OK, res, responseObj);
                    } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error("Error while creating package for the request due to " + e.message);

                        response = responseProcessor.buildErrorResponseDefault(e.code, 'error on create package', res,
                                        'Failed to create package of type: ' + options.type, e.message, []);
                        return;
                    }
                    log.error(e.message, e);
                    response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on create package', res, 'Failed to create package of type: ' + options.type, 'more information on create package error', []);
                    if (log.isDebugEnabled()) {
                        log.debug("Error while creating package for the request : " + e);
                    }
                }
            }
        break;
        default://other un-implemented endpoints
            response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.NOT_IMPLEMENTED, 'Not Implemented API endpoints', res, 'The endpoint that you have requested is not implemented for the ' + method + ' method.Try making the request with the appropriate verb' + '(hint: create/update operations use POST).', []);
    }
}, request, response, session);
%>
